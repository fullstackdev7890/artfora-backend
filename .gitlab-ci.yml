stages:
  - build
  # - tests
  - deploy

#
variables:
  DOMAIN: dev.artfora.artel-workshop.com
  short_branch: $short_branch
  CI_PROJECT_NAME: $CI_PROJECT_NAME
  CI_COMMIT_SHORT_SHA: $CI_COMMIT_SHORT_SHA


build:
  stage: build
  #disable cache
  cache: []
  before_script:
    - sudo mkdir -p /home/${short_branch}/${short_branch}-${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}
    - > 
      docker volume create --opt type=none --opt device=/home/${short_branch}/${short_branch}-${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA} ${short_branch}-${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA} --opt o=bind
      ## if symlink exist delete them and recreate to build
    - > 
      sudo ln -sfn /home/${short_branch}/${short_branch}-${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA} /home/${short_branch}-${CI_PROJECT_NAME}
    - > 
      if [[ $(docker volume ls | grep "${short_branch}-pv-storage" | wc -l) = 0 ]]; then 
        docker volume create --opt type=none --opt device=/home/${short_branch}/image-storage ${short_branch}-pv-storage --opt o=bind;
      else 
        echo "Volume ${short_branch}-pv-storage already has"
      fi
    - > 
      if [[ $(docker volume ls | grep "${short_branch}-pv-logs" | wc -l) = 0 ]]; then 
        docker volume create --opt type=none --opt device=/home/${short_branch}/logs ${short_branch}-pv-logs --opt o=bind;
      else 
        echo "Volume ${short_branch}-pv-logs already has"
      fi
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"

  script:
    - cat Dockerfile | envsubst > Dockerfile.exec
    - cat Dockerfile.exec
    - cat $env > .env
    - docker build . -t "${short_branch}-${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}" --file Dockerfile.exec


  environment:
    name: $CI_COMMIT_REF_NAME

  only:
    - staging
    - development
    - production
  tags:
    - artfora


deploy:
  stage: deploy
  before_script:
    - docker volume create --name="${short_branch}-${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}"
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - cat docker/docker-compose.example | envsubst > docker-compose.yml
    # - docker exec ${short_branch}-${CI_PROJECT_NAME} /bin/bash -c "echo $env > /app/.env"
    - cat docker-compose.yml
    - docker-compose up -d
    # - docker exec ${short_branch}-${CI_PROJECT_NAME} mv /app/vars /app/.env
    - docker exec ${short_branch}-${CI_PROJECT_NAME} php artisan migrate --force
    - docker exec ${short_branch}-${CI_PROJECT_NAME} ln -s /home/storage /app/storage/app
  after_script:
    - echo "--- clean old volumes ---"
    - volume_list=$(docker volume ls | grep "${short_branch}-${CI_PROJECT_NAME}" | grep -v ${CI_COMMIT_SHORT_SHA} | awk '{print $2}') && for item in ${volume_list//\\n\ }; do docker volume rm $item; done
    - > 
      dir_list=$(sudo ls /home/${short_branch}/ | grep "${short_branch}-${CI_PROJECT_NAME}" | grep -v "${CI_COMMIT_SHORT_SHA}" ) && 
      for item in ${dir_list//\\n\ };
      do sudo rm -rf "/home/${short_branch}/$item"; 
      done
    - echo "--- clean unused images ---"
    - docker system prune -a -f
 #   - docker stop ${short_branch}-${CI_PROJECT_NAME} nginx && docker start ${short_branch}-${CI_PROJECT_NAME} nginx
  environment:
    name: $CI_COMMIT_REF_NAME
  only:
    - staging
    - development
    - production
  tags:
    - artfora
